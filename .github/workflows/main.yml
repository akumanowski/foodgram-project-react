name: Main Foodgram workflow


on:
  push:
    branches:
      - main


jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: ${{ secrets.DOCKER_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt
    - name: Test with flake8 and django tests
      env:
        POSTGRES_USER: ${{ secrets.DOCKER_USERNAME }}
        POSTGRES_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        POSTGRES_DB: ${{ secrets.DB_NAME }}
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
        DB_NAME: foodgram
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        ALLOWED_HOSTS: top-kittygram.site,localhost,127.0.0.1,backend
        DSN: ${{ secrets.DSN }}
        DJANGO_DEBUG: Нет
      run: |
        python -m flake8 backend/
        cd backend/
        python manage.py test
  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - build_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@main
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          # Переходим в рабочую папку
          cd foodgram-project/foodgram
          # Чистим мусор в системе
          docker system prune -a --force
          sudo npm cache clean
          sudo apt-get clean
          sudo journalctl --vacuum-size=100M
          sudo journalctl --vacuum-time=1d
          sudo journalctl --vacuum-files=10
          docker images --filter "dangling=true" -q | xargs docker rmi
          # Останавливаем и перезапускаем docker-compose.production.yml
          docker compose -f docker-compose.production.yml pull
          docker compose -f docker-compose.production.yml down
          docker compose -f docker-compose.production.yml up -d
          # Миграции и сбор статики
          docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
          docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /static/
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@main
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой Foodgram успешно выполнен!
